name: Laravel CI/CD with Docker

on:
  push:
    branches: ["main"]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/laravel-api
  DOCKER_TAG: latest
  CONTAINER_PORT: 80
  HOST_PORT: 8080
  AWS_SERVER_IP: 54.169.119.235

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Verify Docker image pushed successfully
        run: |
          echo "Docker image pushed: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"

  pre-deploy-check:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Verify EC2 Reachability
        run: nc -zv -w 5 ${{ secrets.AWS_EC2_HOST }} 22

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.AWS_EC2_HOST }}" ]; then
            echo "AWS_EC2_HOST secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SSH_PRIVATE_KEY }}" ]; then
            echo "AWS_SSH_PRIVATE_KEY secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.REPOSITORY_NAME }}" ]; then
            echo "REPOSITORY_NAME secret is missing"
            exit 1
          fi
          echo "All required secrets are present"

  deploy:
    needs: pre-deploy-check
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          echo "${{ secrets.AWS_EC2_HOST_KEY }}" >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/ec2_key \
              -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} \
              "echo 'SSH connection successful!' && hostname"

      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on error

            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            # Install Nginx if missing
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            fi

            # Docker login
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Stop and remove any existing container
            echo "Stopping and removing existing container..."
            sudo docker ps -q --filter "name=${{ secrets.REPOSITORY_NAME }}" | xargs -r sudo docker stop
            sudo docker ps -aq --filter "name=${{ secrets.REPOSITORY_NAME }}" | xargs -r sudo docker rm

            # Prune old images
            echo "Pruning old Docker images..."
            sudo docker image prune -a -f

            # Pull latest image
            echo "Pulling latest Docker image..."
            sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            # Setup environment directory
            echo "Setting up environment..."
            sudo mkdir -p /tmp/"${{ secrets.REPOSITORY_NAME }}"
            sudo chown -R $USER:$USER /tmp/"${{ secrets.REPOSITORY_NAME }}"
            mkdir -p /tmp/"${{ secrets.REPOSITORY_NAME }}"/storage/framework/{cache,sessions,views} /tmp/"${{ secrets.REPOSITORY_NAME }}"/storage/logs
            echo "${{ secrets.DOT_ENV }}" > /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env

            # Update .env file with dynamic values
            echo "Updating .env file..."
            # Update .env file with dynamic values
            echo "Updating .env file..."
            sed -i "s|APP_URL=.*|APP_URL=http://${{ env.AWS_SERVER_IP }}|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env
            sed -i "s|DB_HOST=.*|DB_HOST=172.17.0.1|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env # Point to host from container
            sed -i "s|DB_USERNAME=.*|DB_USERNAME=${{ secrets.DB_USERNAME }}|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env

            # Configure Nginx with explicit IP address
            echo "Configuring Nginx..."
            echo 'server {
                listen 80;
                server_name '
            sed -i "s|DB_USERNAME=.*|DB_USERNAME=${{secrets.DB_USERNAME}}|" /tmp/"${{ secrets.REPOSITORY_NAME}}"/.env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{secrets.DB_PASSWORD}}|" /tmp/"${{ secrets.REPOSITORY_NAME}}"/.env
            sed -i "s|APP_ENV=.*|APP_ENV=production|" /tmp/"${{ secrets.REPOSITORY_NAME}}"/.env
            sed -i "s|PROJECT_NAME=.*|PROJECT_NAME=laravel-api|" /tmp/"${{ secrets.REPOSITORY_NAME}}"/.env

            # Configure Nginx with explicit IP address
            echo "Configuring Nginx..."
            # Configure Nginx by overwriting the default site configuration
            echo "Configuring Nginx..."
            # Create a custom Nginx configuration for the application
            echo "Configuring Nginx..."
            echo 'server {
                listen 80 default_server;
                server_name _;

                location / {
                    proxy_pass http://localhost:'"${{ env.HOST_PORT }}"';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $host;
                }
            }' | sudo tee /etc/nginx/conf.d/laravel.conf

            # Ensure the main nginx.conf includes the conf.d directory
            sudo sed -i 's|#\s*include /etc/nginx/conf.d/\*.conf;|include /etc/nginx/conf.d/\*.conf;|g' /etc/nginx/nginx.conf

            # Test and reload Nginx
            echo "Testing Nginx configuration..."
            sudo nginx -t
            echo "Reloading Nginx..."
            sudo systemctl reload nginx

            # Final diagnostics: Show Nginx logs from the host
            echo "--- Nginx Access Log ---"
            sudo tail -n 50 /var/log/nginx/access.log
            echo "--- Nginx Error Log ---"
            sudo tail -n 50 /var/log/nginx/error.log

            # Test and reload Nginx
            echo "Testing Nginx configuration..."
            sudo nginx -t
            echo "Reloading Nginx..."
            sudo systemctl reload nginx

            # Remove default Nginx config if it exists
            sudo rm -f /etc/nginx/sites-enabled/default

            # Test and reload Nginx
            echo "Testing Nginx configuration..."
            sudo nginx -t
            echo "Reloading Nginx..."
            sudo systemctl reload nginx

            # Run Docker container with correct volume paths
            echo "Starting Docker container ...."
            sudo docker run -d \
              --name "${{ secrets.REPOSITORY_NAME }}" \
              -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
              --restart unless-stopped \
              -v /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env:/var/www/html/.env \
              -v /tmp/"${{ secrets.REPOSITORY_NAME }}"/storage:/var/www/html/storage \
              ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 15


            echo "Fixing storage permissions..."
            sudo docker exec "${{ secrets.REPOSITORY_NAME }}" chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

            # Wait for container to start and check its status
            echo "Waiting for container to initialize..."
            sleep 15
            echo "Checking container status:"
            sudo docker ps -a --filter "name=${{ secrets.REPOSITORY_NAME }}"
            echo "--- Docker Container Logs ---"
            sudo docker logs "${{ secrets.REPOSITORY_NAME }}"

            # Final diagnostics: Show Nginx logs from the host
            echo "--- Nginx Access Log ---"
            sudo tail -n 50 /var/log/nginx/access.log
            echo "--- Nginx Error Log ---"
            sudo tail -n 50 /var/log/nginx/error.log

      - name: Verify Deployment
        run: |
          echo "Testing final deployment from workflow..."
          sleep 10
          curl -s -o /dev/null -w "Final check: %{http_code}\n" http://${{ env.AWS_SERVER_IP }} || \
          echo "Deployment may still be initializing. Check server manually if issues persist."

          echo "Deployment pipeline completed successfully!"
