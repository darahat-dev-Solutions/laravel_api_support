name: Laravel CI/CD with Docker

on:
  push:
    branches: ["main"]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/laravel-api
  DOCKER_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  pre-deploy-check:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Verify EC2 Reachability
        run: nc -zv -w 5 ${{ secrets.AWS_EC2_HOST }} 22

  deploy:
    needs: pre-deploy-check
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          echo "${{ secrets.AWS_EC2_HOST_KEY }}" >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/ec2_key \
              -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} \
              "echo 'SSH connection successful!'"

      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # Docker login
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Stop and remove any existing container
            sudo docker ps -q --filter "name=${{ secrets.REPOSITORY_NAME }}" | xargs -r sudo docker stop
            sudo docker ps -aq --filter "name=${{ secrets.REPOSITORY_NAME }}" | xargs -r sudo docker rm

            # Prune old images
            sudo docker image prune -a -f

            # Pull latest image
            sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            # Setup environment
            mkdir -p /home/ubuntu/"${{ secrets.REPOSITORY_NAME }}"/storage
            echo "${{ secrets.DOT_ENV }}" > /home/ubuntu/"${{ secrets.REPOSITORY_NAME }}"/.env

            # Configure Nginx as reverse proxy (ADD THIS PART)
            echo 'server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:8080;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }' | sudo tee /etc/nginx/conf.d/laravel.conf

            # Test and reload Nginx (ADD THIS PART)
            sudo nginx -t
            sudo systemctl reload nginx

            # Run Docker container on port 8080 (CHANGED FROM 80:80 TO 8080:80, No domain exist. used AWS public ip)
            sudo docker run -d \
              --name "${{ secrets.REPOSITORY_NAME }}" \
              -p 8080:80 \  # Changed this line
              --restart unless-stopped \
              -v /home/ubuntu/"${{ secrets.REPOSITORY_NAME }}"/.env:/var/www/html/.env \
              -v /home/ubuntu/"${{ secrets.REPOSITORY_NAME }}"/storage:/var/www/html/storage \
              ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            # Post-deploy optimizations
            sleep 10
            sudo docker exec "${{ secrets.REPOSITORY_NAME }}" php artisan optimize --no-routes
            sudo docker exec "${{ secrets.REPOSITORY_NAME }}" php artisan storage:link || true
