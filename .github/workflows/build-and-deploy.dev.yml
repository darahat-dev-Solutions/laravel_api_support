name: Laravel CI/CD with Docker

on:
  push:
    branches: ["main"]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/laravel-api
  DOCKER_TAG: latest
  CONTAINER_PORT: 80
  HOST_PORT: 8080
  AWS_SERVER_IP: 54.169.119.235
  DOCKER_BUILD_DEBUG: 1 # Toggle to 0 to disable verbose build diagnostics

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Buildx (container driver for advanced features)
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Show git context (debug)
        run: |
          echo "Listing top-level files"; ls -al . | head -n 100
          echo "Git status:"; git status
          echo "Searching for .env.example presence:"; find . -maxdepth 2 -name '.env.example'

      - name: Build and push Docker image (debug capable)
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          build-args: |
            ENABLE_BUILD_DEBUG=${{ env.DOCKER_BUILD_DEBUG }}
          provenance: false
          no-cache: false
          labels: build_run=${{ github.run_id }}

      - name: Record image digest
        run: |
          echo "Image digest: ${{ steps.build.outputs.digest }}" || true
          echo "Tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"

      - name: Smoke test container
        run: |
          echo "Running container smoke test..."
          docker run -d --name smoke -p 8081:80 ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          sleep 12
          echo "Container logs (tail):"; docker logs --tail 80 smoke || true
          echo "Checking APP_KEY presence inside container:"; docker exec smoke grep -E '^APP_KEY=' .env || echo 'APP_KEY missing'
          echo "Artisan about (non-fatal if fails):"; docker exec smoke php artisan about || true
          echo "Permissions check:"; docker exec smoke ls -ld storage storage/framework storage/logs bootstrap/cache || true
          docker rm -f smoke || true

      - name: Save docker debug logs on failure
        if: failure()
        run: |
          echo "Workflow failed; attempting to gather additional diagnostics."
          docker image ls | head -n 20 || true
          df -h || true
          free -m || true

      - name: Verify Docker image pushed successfully
        run: |
          echo "Docker image pushed: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"

  pre-deploy-check:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Verify EC2 Reachability
        run: nc -zv -w 5 ${{ secrets.AWS_EC2_HOST }} 22

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.AWS_EC2_HOST }}" ]; then
            echo "AWS_EC2_HOST secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SSH_PRIVATE_KEY }}" ]; then
            echo "AWS_SSH_PRIVATE_KEY secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.REPOSITORY_NAME }}" ]; then
            echo "REPOSITORY_NAME secret is missing"
            exit 1
          fi
          echo "All required secrets are present"

  deploy:
    needs: pre-deploy-check
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          echo "${{ secrets.AWS_EC2_HOST_KEY }}" >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/ec2_key \
              -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} \
              "echo 'SSH connection successful!' && hostname"

      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on error

            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            # Stop services that may block port 80
            echo "Stopping Apache/Nginx if running..."
            sudo systemctl stop apache2 2>/dev/null || true
            sudo systemctl stop nginx 2>/dev/null || true

            # Docker login
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Stop and remove any existing container
            echo "Stopping and removing existing container..."
            sudo docker ps -q --filter "name=${{ secrets.REPOSITORY_NAME }}" | xargs -r sudo docker stop
            sudo docker ps -aq --filter "name=${{ secrets.REPOSITORY_NAME }}" | xargs -r sudo docker rm

            # Prune old images
            echo "Pruning old Docker images..."
            sudo docker image prune -a -f

            # Pull latest image
            echo "Pulling latest Docker image..."
            sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            # Setup environment directory
            echo "Setting up environment..."
            sudo mkdir -p /tmp/"${{ secrets.REPOSITORY_NAME }}"
            sudo chown -R $USER:$USER /tmp/"${{ secrets.REPOSITORY_NAME }}"
            mkdir -p /tmp/"${{ secrets.REPOSITORY_NAME }}"/storage/framework/{cache,sessions,views} /tmp/"${{ secrets.REPOSITORY_NAME }}"/storage/logs
            echo "${{ secrets.DOT_ENV }}" > /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env

            # Update .env file with dynamic values
            echo "Updating .env file..."
            sed -i "s|APP_URL=.*|APP_URL=http://${{ env.AWS_SERVER_IP }}|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env
            sed -i "s|DB_HOST=.*|DB_HOST=172.17.0.1|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env
            sed -i "s|DB_USERNAME=.*|DB_USERNAME=${{ secrets.DB_USERNAME }}|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env

            # Run container on fixed port 80
            echo "Starting Docker container on port 80..."
            sudo docker run -d \
              --name "${{ secrets.REPOSITORY_NAME }}" \
              -p 80:${{ env.CONTAINER_PORT }} \
              --restart unless-stopped \
              -v /tmp/"${{ secrets.REPOSITORY_NAME }}"/.env:/var/www/html/.env \
              -v /tmp/"${{ secrets.REPOSITORY_NAME }}"/storage:/var/www/html/storage \
              ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            echo "Container started. Host URL: http://${{ env.AWS_SERVER_IP }}"

            # Fix storage permissions
            echo "Fixing storage permissions..."
            sudo docker exec "${{ secrets.REPOSITORY_NAME }}" chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

            echo "--- Docker Container Logs ---"
            sudo docker logs "${{ secrets.REPOSITORY_NAME }}"

      - name: Verify Deployment
        run: |
          echo "Testing final deployment from workflow..."
          sleep 10
          curl -s -o /dev/null -w "Final check: %{http_code}\n" http://${{ env.AWS_SERVER_IP }} || \
          echo "Deployment may still be initializing. Check server manually if issues persist."

          echo "Deployment pipeline completed successfully!"
